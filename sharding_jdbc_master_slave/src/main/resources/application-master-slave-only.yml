# 仅实现了数据库读写分离
spring:
  shardingsphere:
    datasource:
      names: master,slave01,slave02
      master:
        # shardingsphere 5.x版本使用druid数据源会有兼容性问题
#        type: com.alibaba.druid.pool.DruidDataSource
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://tx-gd:4409/sharding0?useUnicode=true&characterEncoding=utf8&autoReconnect=true&rewriteBatchedStatements=TRUE
        username: nacos
        password: 123456
      slave01:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://tx-gd:4409/sharding1?useUnicode=true&characterEncoding=utf8&autoReconnect=true&rewriteBatchedStatements=TRUE
        username: nacos
        password: 123456
      slave02:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://tx-gd:4409/sharding1_0?useUnicode=true&characterEncoding=utf8&autoReconnect=true&rewriteBatchedStatements=TRUE
        username: nacos
        password: 123456
    props:
      # 5版本
      sql-show: true
      # 4版本
      sql:
        show: true
    rules:
      readwrite-splitting:
        data-sources:
          read_write: # 自定义名称
            type: Static
            props:
              write-data-source-name: master
              read-data-source-names: slave01,slave02  # 注意names是复数
            loadBalancerName: lbs # 自定义负载均衡器名称
        load-balancers:
          # 基于权重的从库读
          # 自定义名称, 上面引用此名称
          # 自定义名称不能使用下划线,否则props注入失败
          lbs:
            # type取值:  WEIGHT权重  ROUND_ROBIN轮训 RANDOM随机
            type: WEIGHT
            props:
              slave01: 80
              slave02: 20
#    sharding:
#      default-database-strategy:
#        inline:
#          sharding-column: id
#          algorithm-expression: ds$->{id % 2}
#      binding-tables: health_record, health_task
#      broadcast-tables: health_level
#      tables:
#        user:
#          actual-data-nodes: ds$->{0..1}.user$->{0..2}
#          database-strategy:
#            inline:
#              sharding-column: user_id
#              algorithm-expression: ds$->{user_id % 2}
#          table-strategy:
#            inline:
#              sharding-column: user_id
#              algorithm-expression: user$->{user_id % 3}
#        health_record:
#          actual-data-nodes: ds$->{0..1}.health_record
#          database-strategy:
#            inline:
#              sharding-column: user_id
#              algorithm-expression: ds$->{user_id % 2}
#            key-generator:
#              column: record_id
#              type: SNOWFLAKE
#              props:
#                worker.id: 33
#        health_task:
#          actual-data-nodes: ds$->{0..1}.health_task
#          database-strategy:
#            inline:
#              sharding-column: user_id
#              algorithm-expression: ds$->{user_id % 2}
#            key-generator:
#              column: task_id
#              type: SNOWFLAKE
#              props:
#                worker.id: 33
#  datasource:
#    driver-class-name: com.mysql.jdbc.Driver
#    url: jdbc:mysql://localhost:3306/sharding_1?useUnicode=true&characterEncoding=utf8&autoReconnect=true&rewriteBatchedStatements=TRUE
#    username: root
#    password: 123456
#    type: com.alibaba.druid.pool.DruidDataSource

mybatis-plus:
  mapper-locations: classpath:mapper/*.xml
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl