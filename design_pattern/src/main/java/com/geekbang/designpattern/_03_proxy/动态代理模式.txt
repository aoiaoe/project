所谓动态代理（Dynamic Proxy），就是我们不
事先为每个原始类编写代理类，而是在运行的时候，动态地创建原始类对应的代理类，然后
在系统中用代理类替换掉原始类。


代理模式的应用场景：

1. 业务系统的非功能性需求开发
代理模式最常用的一个应用场景就是，在业务系统中开发一些非功能性需求，比如：监控、
统计、鉴权、限流、事务、幂等、日志。我们将这些附加功能与业务功能解耦，放到代理类
中统一处理，让程序员只需要关注业务方面的开发。实际上，前面举的搜集接口请求信息的
例子，就是这个应用场景的一个典型例子。
如果你熟悉 Java 语言和 Spring 开发框架，这部分工作都是可以在 Spring AOP 切面中完
成的。前面我们也提到，Spring AOP 底层的实现原理就是基于动态代理。


2. 代理模式在 RPC、缓存中的应用

实际上，RPC 框架也可以看作一种代理模式，GoF 的《设计模式》一书中把它称作远程代
理。通过远程代理，将网络通信、数据编解码等细节隐藏起来。客户端在使用 RPC 服务的
时候，就像使用本地函数一样，无需了解跟服务器交互的细节。除此之外，RPC 服务的开
发者也只需要开发业务逻辑，就像开发本地使用的函数一样，不需要关注跟客户端的交互细
节。
在rpc模块中，使用动态代理实现了rpc